// routes/uploadPassportImage.js

const express = require("express");
const path = require("path");
const fs = require("fs");
const multer = require("multer");

const { GoogleGenAI } = require("@google/genai");
const ai = new GoogleGenAI({
  apiKey: process.env.GOOGLE_GEMINI_API_KEY,
});

const router = express.Router();
const upload = multer({ dest: path.join(__dirname, "../uploads/") });

// Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄÎ•º Í∏∞Î∞òÏúºÎ°ú Ï†ïÎ≥¥ Ï∂îÏ∂ú (ÏÉàÎ°úÏö¥ ÏóîÎìúÌè¨Ïù∏Ìä∏)
router.post("/from-url", async (req, res) => {
  try {
    const { imageUrl, applicationId } = req.body;

    if (!imageUrl) {
      return res.status(400).json({ error: "Ïù¥ÎØ∏ÏßÄ URLÏù¥ ÌïÑÏöîÌï©ÎãàÎã§" });
    }

    if (!applicationId) {
      return res.status(400).json({ error: "Ïã†Ï≤≠ÏÑú IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§" });
    }

    console.log("üì∑ Ïù¥ÎØ∏ÏßÄ URLÎ°úÎ∂ÄÌÑ∞ Ïó¨Í∂å Ï†ïÎ≥¥ Ï∂îÏ∂ú:", imageUrl);

    // 1) ÏÑúÎ≤ÑÏóê Ï†ÄÏû•Îêú Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏùΩÍ∏∞
    let imagePath;
    if (imageUrl.startsWith("/uploads/")) {
      // ÏÉÅÎåÄ Í≤ΩÎ°úÏù∏ Í≤ΩÏö∞ Ï†àÎåÄ Í≤ΩÎ°úÎ°ú Î≥ÄÌôò
      imagePath = path.join(__dirname, "../", imageUrl);
    } else {
      return res.status(400).json({ error: "Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ Ïù¥ÎØ∏ÏßÄ URLÏûÖÎãàÎã§" });
    }

    // ÌååÏùº Ï°¥Ïû¨ ÌôïÏù∏
    if (!fs.existsSync(imagePath)) {
      console.log("‚ùå ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:", imagePath);
      return res.status(404).json({ error: "Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§" });
    }

    // 2) Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏùΩÍ∏∞ Î∞è Base64 Î≥ÄÌôò
    const imageBuffer = fs.readFileSync(imagePath);
    const imageBase64 = imageBuffer.toString("base64");

    // MIME ÌÉÄÏûÖ Ï∂îÎ°†
    const ext = path.extname(imagePath).toLowerCase();
    let mimeType = "image/jpeg";
    if (ext === ".png") mimeType = "image/png";
    else if (ext === ".webp") mimeType = "image/webp";

    // 3) Gemini API Ìò∏Ï∂ú
    const contents = [
      {
        inlineData: {
          mimeType: mimeType,
          data: imageBase64,
        },
      },
      {
        text:
          "You are an OCR assistant specialized in passports. " +
          "Extract the following fields and return strictly as JSON (keys in camelCase): " +
          "type, issuingCountry, passportNo, surname, givenNames, dateOfBirth, sex, " +
          "nationality, personalNo, dateOfIssue, dateOfExpiry, authority, koreanName. " +
          "If a field is not readable, use null.",
      },
    ];

    const response = await ai.models.generateContent({
      model: "gemini-1.5-pro-latest",
      contents: contents,
    });

    const fullText = response.text;
    console.log("Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏:", fullText);

    // JSON Ï∂îÏ∂ú (```json ... ``` ÌòïÏãù Ï≤òÎ¶¨)
    const jsonMatch = fullText.match(/```json\s*([\s\S]*?)\s*```/);
    const jsonString = jsonMatch ? jsonMatch[1] : fullText;
    const extracted = JSON.parse(jsonString);

    console.log("‚úÖ Ïó¨Í∂å Ï†ïÎ≥¥ Ï∂îÏ∂ú ÏôÑÎ£å:", extracted);

    // 4) Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
    const models = require("../models");
    const { VisaApplication, Document } = models;

    // Ìï¥Îãπ Ïã†Ï≤≠ÏÑúÏùò Ïó¨Í∂å Î¨∏ÏÑú Ï∞æÍ∏∞
    const passportDocument = await Document.findOne({
      where: {
        applicationId: applicationId,
        type: "passport",
      },
    });

    if (passportDocument) {
      // extractedInfoÎ•º JSONÏúºÎ°ú Ï†ÄÏû•
      await passportDocument.update({
        extractedInfo: JSON.stringify(extracted),
      });
      console.log("‚úÖ Ïó¨Í∂å Ï∂îÏ∂ú Ï†ïÎ≥¥ DB Ï†ÄÏû• ÏôÑÎ£å");
    }

    // 5) ÏóÖÎç∞Ïù¥Ìä∏Îêú Ïã†Ï≤≠ÏÑú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (GetApplication ÏøºÎ¶¨ÏôÄ ÎèôÏùºÌïú ÌòïÌÉú)
    const application = await VisaApplication.findByPk(applicationId, {
      include: [
        {
          model: Document,
          as: "documents",
          required: false,
        },
      ],
    });

    if (!application) {
      return res.status(404).json({ error: "Ïã†Ï≤≠ÏÑúÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§" });
    }

    // GraphQL ÏùëÎãµÍ≥º ÎèôÏùºÌïú ÌòïÌÉúÎ°ú Î≥ÄÌôò
    const dbToGraphQLStatus = (dbStatus) => {
      const statusMapping = {
        pending: "PENDING",
        processing: "PROCESSING",
        document_review: "DOCUMENT_REVIEW",
        submitted_to_authority: "SUBMITTED_TO_AUTHORITY",
        approved: "APPROVED",
        rejected: "REJECTED",
        completed: "COMPLETED",
      };
      return statusMapping[dbStatus] || dbStatus.toUpperCase();
    };

    // Ïó¨Í∂å Î¨∏ÏÑúÏóêÏÑú extractedInfo Í∞ÄÏ†∏Ïò§Í∏∞
    let applicationExtractedInfo = null;
    const updatedPassportDocument = application.documents?.find(
      (doc) => doc.type === "passport",
    );
    if (updatedPassportDocument && updatedPassportDocument.extractedInfo) {
      try {
        applicationExtractedInfo =
          typeof updatedPassportDocument.extractedInfo === "string"
            ? JSON.parse(updatedPassportDocument.extractedInfo)
            : updatedPassportDocument.extractedInfo;
      } catch (parseError) {
        console.warn(
          `‚ö†Ô∏è Application extractedInfo ÌååÏã± Ïã§Ìå®:`,
          parseError.message,
        );
        applicationExtractedInfo = null;
      }
    }

    const applicationResponse = {
      id: application.id.toString(),
      applicationId: application.applicationId || `APP-${application.id}`,
      processingType: application.processingType || "STANDARD",
      totalPrice: application.totalPrice || 0,
      createdAt: application.createdAt,
      status: dbToGraphQLStatus(application.status),
      extractedInfo: applicationExtractedInfo,
      personalInfo: {
        id: application.id.toString(),
        firstName:
          application.firstName ||
          application.fullName?.split(" ")[0] ||
          "Ïù¥Î¶Ñ",
        lastName:
          application.lastName || application.fullName?.split(" ")[1] || "ÏÑ±",
        fullName:
          application.fullName ||
          `${application.firstName || ""} ${application.lastName || ""}`.trim(),
        email: application.email || "email@example.com",
        phone: application.phone || "010-0000-0000",
        address: application.address || "Ï£ºÏÜå Ï†ïÎ≥¥ ÏóÜÏùå",
        phoneOfFriend: application.phoneOfFriend || null,
      },
      travelInfo: {
        id: application.id.toString(),
        entryDate: application.entryDate || application.arrivalDate,
        entryPort: application.entryPort || "Ïù∏Ï≤úÍµ≠Ï†úÍ≥µÌï≠",
        visaType: application.visaType || "E_VISA_GENERAL",
      },
      additionalServices: [],
      documents: (application.documents || []).map((doc) => {
        let parsedExtractedInfo = null;
        if (doc.extractedInfo) {
          try {
            parsedExtractedInfo =
              typeof doc.extractedInfo === "string"
                ? JSON.parse(doc.extractedInfo)
                : doc.extractedInfo;
          } catch (e) {
            console.warn("extractedInfo ÌååÏã± Ïã§Ìå®:", e);
            parsedExtractedInfo = null;
          }
        }
        return {
          id: doc.id.toString(),
          type: doc.type,
          fileName: doc.fileName,
          fileSize: doc.fileSize,
          fileType: doc.fileType,
          uploadedAt: doc.uploadedAt || doc.createdAt,
          extractedInfo: parsedExtractedInfo,
          fileUrl: doc.filePath ? doc.filePath : null,
          fileData: doc.filePath ? null : doc.fileData,
        };
      }),
    };

    console.log("üì§ GetApplication ÌòïÌÉúÎ°ú ÏùëÎãµ Î∞òÌôò");
    return res.json({ application: applicationResponse });
  } catch (error) {
    console.error("‚ùå Gemini API error:", error);
    return res
      .status(500)
      .json({ error: "Extraction failed", details: error.message });
  }
});

// Í∏∞Ï°¥ ÌååÏùº ÏóÖÎ°úÎìú Î∞©Ïãù (Ìò∏ÌôòÏÑ± Ïú†ÏßÄ)
router.post("/", upload.single("image"), async (req, res) => {
  try {
    // 1) ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ ÏùΩÍ∏∞
    const imagePath = req.file.path;
    const imageBuffer = fs.readFileSync(imagePath);
    const imageBase64 = imageBuffer.toString("base64"); // 2) ÏöîÏ≤≠ ÌéòÏù¥Î°úÎìú Íµ¨ÏÑ±
    const contents = [
      {
        inlineData: {
          mimeType: req.file.mimetype,
          data: imageBase64,
        },
      },
      {
        text:
          "You are an OCR assistant specialized in passports. " +
          "Extract the following fields and return strictly as JSON (keys in snake_case): " +
          "type, issuing_country, passport_no, surname, given_names, date_of_birth, sex, " +
          "nationality, personal_no, date_of_issue, date_of_expiry, authority, korean_name. " +
          "If a field is not readable, use null.",
      },
    ];

    // 3) Gemini API Ìò∏Ï∂ú
    const response = await ai.models.generateContent({
      model: "gemini-1.5-pro-latest",
      contents: contents,
    });
    const fullText = response.text;
    console.log("Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏:", fullText);

    // JSON Ï∂îÏ∂ú (```json ... ``` ÌòïÏãù Ï≤òÎ¶¨)
    const jsonMatch = fullText.match(/```json\s*([\s\S]*?)\s*```/);
    const jsonString = jsonMatch ? jsonMatch[1] : fullText;
    const extracted = JSON.parse(jsonString);

    // 4) ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
    fs.unlink(imagePath, (err) => {
      if (err) console.warn("Failed to delete temp image:", err);
    });

    return res.json(extracted);
  } catch (error) {
    console.error("‚ùå Gemini API error:", error);
    return res.status(500).json({ error: "Extraction failed" });
  }
});

module.exports = router;
